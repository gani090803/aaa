// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(SaveContext))]
    [Migration("20220319143729_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Bench", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Benches");
                });

            modelBuilder.Entity("Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("ClubStrength")
                        .HasColumnType("float");

                    b.Property<int?>("SaveId")
                        .HasColumnType("int");

                    b.Property<int?>("SquadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaveId");

                    b.HasIndex("SquadId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("BenchId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Position1")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Position2")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Position3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("Potential")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("ReservesId")
                        .HasColumnType("int");

                    b.Property<int?>("StartingElevenId")
                        .HasColumnType("int");

                    b.Property<int?>("StatsId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BenchId");

                    b.HasIndex("ReservesId");

                    b.HasIndex("StartingElevenId");

                    b.HasIndex("StatsId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Models.Reserves", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Reserves");
                });

            modelBuilder.Entity("Models.Save", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SaveName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Saves");
                });

            modelBuilder.Entity("Models.Squad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BenchId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservesId")
                        .HasColumnType("int");

                    b.Property<int?>("StartingElevenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BenchId");

                    b.HasIndex("ReservesId");

                    b.HasIndex("StartingElevenId");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("Models.StartingEleven", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("StartingElevens");
                });

            modelBuilder.Entity("Models.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AssistsAllTime")
                        .HasColumnType("int");

                    b.Property<int>("AssistsCurrentSeason")
                        .HasColumnType("int");

                    b.Property<int>("CleanSheetsAllTime")
                        .HasColumnType("int");

                    b.Property<int>("CleanSheetsCurrentSeason")
                        .HasColumnType("int");

                    b.Property<int>("GamesPlayedAllTime")
                        .HasColumnType("int");

                    b.Property<int>("GamesPlayedCurrentSeason")
                        .HasColumnType("int");

                    b.Property<int>("GoalsScoredAllTime")
                        .HasColumnType("int");

                    b.Property<int>("GoalsScoredCurrentSeason")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("Models.Club", b =>
                {
                    b.HasOne("Models.Save", null)
                        .WithMany("Clubs")
                        .HasForeignKey("SaveId");

                    b.HasOne("Models.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadId");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("Models.Player", b =>
                {
                    b.HasOne("Models.Bench", null)
                        .WithMany("Players")
                        .HasForeignKey("BenchId");

                    b.HasOne("Models.Reserves", null)
                        .WithMany("Players")
                        .HasForeignKey("ReservesId");

                    b.HasOne("Models.StartingEleven", null)
                        .WithMany("Players")
                        .HasForeignKey("StartingElevenId");

                    b.HasOne("Models.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Models.Squad", b =>
                {
                    b.HasOne("Models.Bench", "Bench")
                        .WithMany()
                        .HasForeignKey("BenchId");

                    b.HasOne("Models.Reserves", "Reserves")
                        .WithMany()
                        .HasForeignKey("ReservesId");

                    b.HasOne("Models.StartingEleven", "StartingEleven")
                        .WithMany()
                        .HasForeignKey("StartingElevenId");

                    b.Navigation("Bench");

                    b.Navigation("Reserves");

                    b.Navigation("StartingEleven");
                });

            modelBuilder.Entity("Models.Bench", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Models.Reserves", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Models.Save", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("Models.StartingEleven", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
